<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kids on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/kids/</link>
    <description>Recent content in kids on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 25 Sep 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://trishagee.github.io/tags/kids/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kids These Days</title>
      <link>https://trishagee.github.io/post/kids_these_days/</link>
      <pubDate>Wed, 25 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/kids_these_days/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a great believer in getting kids to code early - after all, I&amp;rsquo;m of that generation that was taught&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10 PRINT &amp;quot;HELLO&amp;quot;
20 GOTO 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the age of 9.  There are quite a few approaches to teaching today&amp;rsquo;s kids in an engaging way, but I&amp;rsquo;m a bit wary of the sandbox solutions that teach kids things like how to navigate a virtual thingie around the screen, or lets them create things in a limited virtual world.  I don&amp;rsquo;t think kids will easily make the leap between these sort of games to seeing the full potential of programming - they&amp;rsquo;re too limited and have no context for the kids.  It&amp;rsquo;s just another game.&lt;/p&gt;
&lt;p&gt;Kids need to understand how programming fits into their world, they need to understand the context of coding, if they&amp;rsquo;re going to fall in love with it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
