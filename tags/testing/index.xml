<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/testing/</link>
    <description>Recent content in Testing on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 26 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://trishagee.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Level Up Your Automated Tests</title>
      <link>https://trishagee.github.io/presentation/level_up_your_automated_tests/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/presentation/level_up_your_automated_tests/</guid>
      <description>&lt;p&gt;This presentation is about how to change a team&amp;rsquo;s attitude towards writing automated tests.  The
talk covers the same case study as
&lt;a href=&#34;https://trishagee.github.io/presentation/groovy_vs_java&#34;&gt;Groovy vs Java for Testing&lt;/a&gt;, adopting
Spock in MongoDB, but this is a more process/agile/people perspective, not a
technical look at the merits of one language over another.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Groovy vs Java</title>
      <link>https://trishagee.github.io/presentation/groovy_vs_java/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/presentation/groovy_vs_java/</guid>
      <description>&lt;p&gt;Resources for my &amp;ldquo;Is Groovy Better Than Java for Testing?&amp;rdquo; talk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spock: Data Driven Testing</title>
      <link>https://trishagee.github.io/post/spock_data_driven_testing/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/spock_data_driven_testing/</guid>
      <description>In the last two articles on Spock I&amp;rsquo;ve covered mocking and stubbing. And I was pretty sold on Spock just based on that. But for a database driver, there&amp;rsquo;s a killer feature: &amp;nbsp;Data Driven Testing.
All developers have a tendency to think of and test the happy path. Not least of all because that&amp;rsquo;s usually the path in the User Story - &amp;ldquo;As a customer I want to withdraw money and have the correct amount in my hand&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Spock passes the next test - Painless Stubbing</title>
      <link>https://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/</guid>
      <description>In the last post I talked about our need for some improved testing tools, our choice of Spock as something to spike, and how mocking looks in Spock.
As that blog got rather long, I saved the next installment for a separate post.
Today I want to look at stubbing.
Stubbing
Mocking is great for checking outputs - in the example in the last post, we&amp;rsquo;re checking that the process of encoding an array calls the right things on the way out, if you like - that the right stuff gets poked onto the bsonWriter.</description>
    </item>
    
    <item>
      <title>Spock is awesome! Seriously Simplified Mocking</title>
      <link>https://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/</guid>
      <description>We&amp;rsquo;re constantly fighting a battle when developing the new MongoDB Java driver between using tools that will do heavy lifting for us and minimising the dependencies a user has to download in order to use our driver. &amp;nbsp;Ideally, we want the number of dependencies to be zero.
This is not going to be the case when it comes to testing, however. &amp;nbsp;At the very least, we&amp;rsquo;re going to use JUnit or TestNG (we used testng in the previous version, we&amp;rsquo;ve switched to JUnit for 3.</description>
    </item>
    
    <item>
      <title>Christmas decorations teach me a lesson about troubleshooting</title>
      <link>https://trishagee.github.io/post/christmas_decorations_teach_me_a_lesson_about_troubleshooting/</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/christmas_decorations_teach_me_a_lesson_about_troubleshooting/</guid>
      <description>And now, after an absence of several weeks, you get to see how long it takes me to write some of these posts.

I was putting up the Christmas decorations one Saturday when my worst fear was realised1 - one of my three strings of lights was not working.
The first two went up fine. &amp;nbsp;The third lit up when I plugged it in, and in less than a second went out.</description>
    </item>
    
  </channel>
</rss>