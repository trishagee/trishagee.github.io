<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>disruptor-docs on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/disruptor-docs/</link>
    <description>Recent content in disruptor-docs on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 22 Mar 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://trishagee.github.io/tags/disruptor-docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Magazine: Intro to the Disruptor Part One</title>
      <link>https://trishagee.github.io/post/java_magazine_intro_to_the_disruptor_part_one/</link>
      <pubDate>Thu, 22 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/java_magazine_intro_to_the_disruptor_part_one/</guid>
      <description>This month&amp;rsquo;s Java Magazine features an article by yours truly, which is yet another intro to the Disruptor. It&amp;rsquo;s basically a summary of the stuff I&amp;rsquo;ve written in this blog, updated for version 2.7 - so the names of the classes should be up to date and the responsibilities follow the simplified pattern we use now. If you were looking for an more recent version of my introduction blog posts, this article gives a reasonable overview.</description>
    </item>
    
    <item>
      <title>Disruptor 2.0 - All Change Please</title>
      <link>https://trishagee.github.io/post/disruptor_20__all_change_please/</link>
      <pubDate>Tue, 30 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/disruptor_20__all_change_please/</guid>
      <description>Martin recently announced version 2.0 of the DisruptorÂ - basically there have been so many changes since we first open-sourced it that it&amp;rsquo;s time to mark that officially. His post goes over all the changes, the aim of this article is to attempt to translate my previous blog posts into new-world-speak, since it&amp;rsquo;s going to take a long time to re-write each of them all over again. Now I see the disadvantage of hand-drawing everything.</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Demystifying Memory Barriers</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers/</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers/</guid>
      <description>My recent slow-down in posting is because I&amp;rsquo;ve been trying to write a post explaining memory barriers and their applicability in the Disruptor. The problem is, no matter how much I read and no matter how many times I ask the ever-patient Martin and Mike questions trying to clarify some point, I just don&amp;rsquo;t intuitively grasp the subject. I guess I don&amp;rsquo;t have the deep background knowledge required to fully understand.</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part two) - Magic cache line padding</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding/</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding/</guid>
      <description>We mention the phrase Mechanical Sympathy quite a lot, in fact it&amp;rsquo;s even Martin&amp;rsquo;s blog title. It&amp;rsquo;s about understanding how the underlying hardware operates and programming in a way that works with that, not against it.
We get a number of comments and questions about the mysterious cache line padding in the RingBuffer, and I referred to it in the last post. Since this lends itself to pretty pictures, it&amp;rsquo;s the next thing I thought I would tackle.</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part one) - Locks Are Bad</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad/</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad/</guid>
      <description>Martin Fowler has written a really good article describing not only the Disruptor, but also how it fits into the architecture at LMAX. This gives some of the context that has been missing so far, but the most frequently asked question is still &amp;ldquo;What is the Disruptor?&amp;rdquo;.
I&amp;rsquo;m working up to answering that. I&amp;rsquo;m currently on question number two: &amp;ldquo;Why is it so fast?&amp;rdquo;.
These questions do go hand in hand, however, because I can&amp;rsquo;t talk about why it&amp;rsquo;s fast without saying what it does, and I can&amp;rsquo;t talk about what it is without saying why it is that way.</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Wiring up the dependencies</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies/</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies/</guid>
      <description>&lt;p&gt;So now I&amp;rsquo;ve covered the &lt;a href=&#34;https://trishagee.com/2011/06/22/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/&#34;&gt;ring buffer&lt;/a&gt; itself, &lt;a href=&#34;https://trishagee.com/2011/06/28/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/&#34;&gt;reading&lt;/a&gt; from it and &lt;a href=&#34;https://trishagee.com/2011/07/04/dissecting_the_disruptor_writing_to_the_ring_buffer/&#34;&gt;writing&lt;/a&gt; to it.&lt;/p&gt;
&lt;p&gt;Logically the next thing to do is to wire everything up together.&lt;/p&gt;
&lt;p&gt;I talked about multiple producers - they have the producer barrier to keep them in order and under control. I&amp;rsquo;ve talked about consumers in a simple situation. Multiple consumers can get a little more involved. &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;We&amp;rsquo;ve&lt;/a&gt; done some clever stuff to allow the consumers to be dependent on each other and the ring buffer. Like a lot of applications, we have a pipeline of things that need to happen before we can actually get on with the business logic - for example, we need to make sure the messages have been journalled to disk before we can do anything.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34;&gt;Disruptor paper&lt;/a&gt; and the performance tests cover some basic configurations that you might want. I&amp;rsquo;m going to go over the most interesting one, mostly because I needed the practice with the graphics tablet.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Writing to the ring buffer</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer/</guid>
      <description>&lt;p&gt;This is the missing piece in the end-to-end view of the Disruptor. Brace yourselves, it&amp;rsquo;s quite long. But I decided to keep it in a single blog so you could have the context in one place.&lt;/p&gt;
&lt;p&gt;The important areas are: not wrapping the ring; informing the consumers; batching for producers; and how multiple producers work.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: How do I read from the ring buffer?</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/</guid>
      <description>&lt;p&gt;The next in the series of understanding &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;the Disruptor pattern&lt;/a&gt; developed at &lt;a href=&#34;http://www.lmaxtrader.com/&#34;&gt;LMAX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the &lt;a href=&#34;https://trishagee.com/2011/06/22/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/&#34;&gt;last post&lt;/a&gt; we all understand ring buffers and how awesome they are. Unfortunately for you, I have not said anything about how to actually populate them or read from them when you&amp;rsquo;re using the Disruptor.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: What&#39;s so special about a ring buffer?</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/</guid>
      <description>&lt;p&gt;Recently we open sourced the &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;LMAX Disruptor&lt;/a&gt;, the key to what makes our exchange so fast.  Why did we open source it?  Well, we&amp;rsquo;ve realised that conventional wisdom around high performance programming is&amp;hellip; a bit wrong. We&amp;rsquo;ve come up with a better, faster way to share data between threads, and it would be selfish not to share it with the world.  Plus it makes us look dead clever.&lt;/p&gt;
&lt;p&gt;On the site you can &lt;a href=&#34;https://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34;&gt;download a technical article&lt;/a&gt; explaining what the Disruptor is and why it&amp;rsquo;s so clever and fast.  I even get a writing credit on it, which is gratifying when all I really did is insert commas and re-phrase sentences I didn&amp;rsquo;t understand.&lt;/p&gt;
&lt;p&gt;However, I find the whole thing a bit much to digest all at once, so I&amp;rsquo;m going to explain it in smaller pieces, as suits my &lt;a href=&#34;http://www.randsinrepose.com/archives/2003/07/10/nadd.html&#34;&gt;NADD&lt;/a&gt; audience.&lt;/p&gt;
&lt;p&gt;First up - the ring buffer.  Initially I was under the impression the Disruptor was just the ring buffer.  But I&amp;rsquo;ve come to realise that while this data structure is at the heart of the pattern, the clever bit about the Disruptor is controlling access to it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
