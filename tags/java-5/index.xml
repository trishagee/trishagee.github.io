<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java 5 on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/java-5/</link>
    <description>Recent content in java 5 on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 14 Apr 2008 00:00:00 +0000</lastBuildDate><atom:link href="https://trishagee.github.io/tags/java-5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AOP Caching</title>
      <link>https://trishagee.github.io/post/aop_caching/</link>
      <pubDate>Mon, 14 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/aop_caching/</guid>
      <description>&lt;p&gt;Today I would like to document my experiences implementing caching with Aspect Oriented Programming (AOP) and annotations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Specifics</title>
      <link>https://trishagee.github.io/post/java_specifics/</link>
      <pubDate>Sat, 07 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/java_specifics/</guid>
      <description>&lt;p&gt;When I first started playing with Java 1.5, I thought &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html&#34;&gt;generics&lt;/a&gt; were the best thing since sliced bread.  No more untidy casting, lovely type-safe Collections, and when combined with the &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html&#34;&gt;new for loop&lt;/a&gt;, a lot of the tedious tasks associated with Collections became easier and, most importantly, aesthetically pleasing.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
