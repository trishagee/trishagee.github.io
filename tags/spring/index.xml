<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/spring/</link>
    <description>Recent content in spring on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 08 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://trishagee.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fully Reactive: Spring, Kotlin, and JavaFX Playing Together</title>
      <link>https://trishagee.github.io/presentation/coding_duel/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/presentation/coding_duel/</guid>
      <description>&lt;p&gt;&lt;em&gt;Spring Framework 5 brings full reactive support to developers everywhere. What better way to demo reactive
programming than to actually build something live? Trisha will live code an end-to-end application using Spring
Framework 5, Spring Boot, Reactor, Kotlin, JavaFX, and maybe even some MongoDB, all built using IntelliJ IDEA. 
During this session, we’ll see how these different components can work together really easily using Spring. What
could possibly go wrong?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amazing!</title>
      <link>https://trishagee.github.io/post/amazing/</link>
      <pubDate>Wed, 08 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/amazing/</guid>
      <description>Today, I found my own blog useful. I was configuring Spring validation on my new project, and had to remind myself how to do it. We configured validation on the new project in less than an hour, which beats the two days it took me to work out how to do it the first time.
And I impressed one of my new work collegues. Apparently I am now the Spring Guru.</description>
    </item>
    
    <item>
      <title>AOP Caching</title>
      <link>https://trishagee.github.io/post/aop_caching/</link>
      <pubDate>Mon, 14 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/aop_caching/</guid>
      <description>Today I would like to document my experiences implementing caching with Aspect Oriented Programming (AOP) and annotations.&amp;nbsp;

Background context&amp;nbsp;
Caching may need to be implemented in your application for a number of reasons. OK, actually usually only one: performance. I would like to add my own tuppence-worth to this though - if you can get away without caching (specifically in application that provide the ability to view and change data) then do so, unless you are using a cache implementation that will handle as much of the pain as possible for you.</description>
    </item>
    
    <item>
      <title>Validation with Spring Modules Validation</title>
      <link>https://trishagee.github.io/post/validation_with_spring_modules_validation/</link>
      <pubDate>Mon, 16 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/validation_with_spring_modules_validation/</guid>
      <description>So if java generics slightly disappointed me lately, what have I found cool?I&#39;m currently working on a web application using Spring MVC, which probably doesn&#39;t come as a big surprise, it seems to be all the rage these days. Since this is my baby, I got to call the shots as to a lot of the framework choices. When it came to looking at implementing validation, I refused to believe I&#39;d have to go through the primitive process of looking at all the values on the request and deciding if they pass muster, with some huge if statement.</description>
    </item>
    
  </channel>
</rss>