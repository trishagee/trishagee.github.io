<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Trisha Gee</title>
    <link>https://trishagee.github.io/tags/concurrency/</link>
    <description>Recent content in concurrency on Trisha Gee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 21 Oct 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://trishagee.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mike and I debut our new Disruptor presentation</title>
      <link>https://trishagee.github.io/post/mike_and_i_debut_our_new_disruptor_presentation/</link>
      <pubDate>Fri, 21 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/mike_and_i_debut_our_new_disruptor_presentation/</guid>
      <description>Last Tuesday Mike and I unveiled our brand shiny new presentation: Understanding the Disruptor, a Beginner&amp;rsquo;s Guide to Hardcore Concurrency. This was a preview of the talk we&amp;rsquo;ll be doing at JAX London on the 2nd November.
A video of the session is available, as are the slides. I promise not to say &amp;ldquo;so&amp;rdquo; anywhere near as many times when I repeat my performance at JAX (is there anything more painful than watching yourself on video?</description>
    </item>
    
    <item>
      <title>Disruptor 2.0 - All Change Please</title>
      <link>https://trishagee.github.io/post/disruptor_20__all_change_please/</link>
      <pubDate>Tue, 30 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/disruptor_20__all_change_please/</guid>
      <description>&lt;p&gt;Martin recently &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/08/disruptor-20-released.html&#34;&gt;announced version 2.0&lt;/a&gt; of &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;the Disruptor&lt;/a&gt; - basically there have been so many changes since we first open-sourced it that it&amp;rsquo;s time to mark that officially.  His post goes over all the changes, the aim of this article is to attempt to translate my previous blog posts into new-world-speak, since it&amp;rsquo;s going to take a long time to re-write each of them all over again.  Now I see the disadvantage of hand-drawing everything.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Demystifying Memory Barriers</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers/</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_demystifying_memory_barriers/</guid>
      <description>&lt;p&gt;My recent slow-down in posting is because I&amp;rsquo;ve been trying to write a post explaining &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_barrier&#34;&gt;memory barriers&lt;/a&gt; and their applicability in &lt;a href=&#34;http://code.google.com/p/disruptor&#34;&gt;the Disruptor&lt;/a&gt;.  The problem is, no matter how much I read and no matter how many times I ask the ever-patient &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt; and &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; questions trying to clarify some point, I just don&amp;rsquo;t intuitively grasp the subject.  I guess I don&amp;rsquo;t have the deep background knowledge required to fully understand.&lt;/p&gt;
&lt;p&gt;So, rather than make an idiot of myself trying to explain something I don&amp;rsquo;t really get, I&amp;rsquo;m going to try and cover, at an abstract / massive-simplification level, what I do understand in the area.  Martin has written a post &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&#34;&gt;going into memory barriers&lt;/a&gt; in some detail, so hopefully I can get away with skimming the subject.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part two) - Magic cache line padding</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding/</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_two__magic_cache_line_padding/</guid>
      <description>&lt;p&gt;We mention the phrase Mechanical Sympathy quite a lot, in fact it&amp;rsquo;s even &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&amp;rsquo;s blog title&lt;/a&gt;.  It&amp;rsquo;s about understanding how the underlying hardware operates and programming in a way that works with that, not against it.&lt;/p&gt;
&lt;p&gt;We get a number of comments and questions about the mysterious cache line padding in the &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptorsource/browse/trunk/code/src/main/com/lmax/disruptor/RingBuffer.java&#34;&gt;RingBuffer&lt;/a&gt;, and I referred to it in the &lt;a href=&#34;https://trishagee.com/2011/07/16/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad/&#34;&gt;last post&lt;/a&gt;.  Since this lends itself to pretty pictures, it&amp;rsquo;s the next thing I thought I would tackle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Why it&#39;s so fast (part one) - Locks Are Bad</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad/</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_why_its_so_fast_part_one__locks_are_bad/</guid>
      <description>&lt;p&gt;Martin Fowler has written a &lt;a href=&#34;http://martinfowler.com/articles/lmax.html&#34;&gt;&lt;span id=&#34;goog_1736243820&#34;&gt;&lt;/span&gt;really good article&lt;span id=&#34;goog_1736243821&#34;&gt;&lt;/span&gt;&lt;/a&gt; describing not only &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;the Disruptor&lt;/a&gt;, but also how it fits into the architecture at &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;LMAX&lt;/a&gt;.  This gives some of the context that has been missing so far, but the most frequently asked question is still &amp;ldquo;What is the Disruptor?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m working up to answering that.  I&amp;rsquo;m currently on question number two: &amp;ldquo;Why is it so fast?&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Wiring up the dependencies</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies/</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_wiring_up_the_dependencies/</guid>
      <description>&lt;p&gt;So now I&amp;rsquo;ve covered the &lt;a href=&#34;https://trishagee.com/2011/06/22/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/&#34;&gt;ring buffer&lt;/a&gt; itself, &lt;a href=&#34;https://trishagee.com/2011/06/28/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/&#34;&gt;reading&lt;/a&gt; from it and &lt;a href=&#34;https://trishagee.com/2011/07/04/dissecting_the_disruptor_writing_to_the_ring_buffer/&#34;&gt;writing&lt;/a&gt; to it.&lt;/p&gt;
&lt;p&gt;Logically the next thing to do is to wire everything up together.&lt;/p&gt;
&lt;p&gt;I talked about multiple producers - they have the producer barrier to keep them in order and under control. I&amp;rsquo;ve talked about consumers in a simple situation. Multiple consumers can get a little more involved. &lt;a href=&#34;http://www.lmaxtrader.co.uk/&#34;&gt;We&amp;rsquo;ve&lt;/a&gt; done some clever stuff to allow the consumers to be dependent on each other and the ring buffer. Like a lot of applications, we have a pipeline of things that need to happen before we can actually get on with the business logic - for example, we need to make sure the messages have been journalled to disk before we can do anything.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34;&gt;Disruptor paper&lt;/a&gt; and the performance tests cover some basic configurations that you might want. I&amp;rsquo;m going to go over the most interesting one, mostly because I needed the practice with the graphics tablet.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: Writing to the ring buffer</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_writing_to_the_ring_buffer/</guid>
      <description>&lt;p&gt;This is the missing piece in the end-to-end view of the Disruptor. Brace yourselves, it&amp;rsquo;s quite long. But I decided to keep it in a single blog so you could have the context in one place.&lt;/p&gt;
&lt;p&gt;The important areas are: not wrapping the ring; informing the consumers; batching for producers; and how multiple producers work.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissecting the Disruptor: How do I read from the ring buffer?</title>
      <link>https://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://trishagee.github.io/post/dissecting_the_disruptor_how_do_i_read_from_the_ring_buffer/</guid>
      <description>&lt;p&gt;The next in the series of understanding &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;the Disruptor pattern&lt;/a&gt; developed at &lt;a href=&#34;http://www.lmaxtrader.com/&#34;&gt;LMAX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the &lt;a href=&#34;https://trishagee.com/2011/06/22/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/&#34;&gt;last post&lt;/a&gt; we all understand ring buffers and how awesome they are. Unfortunately for you, I have not said anything about how to actually populate them or read from them when you&amp;rsquo;re using the Disruptor.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
